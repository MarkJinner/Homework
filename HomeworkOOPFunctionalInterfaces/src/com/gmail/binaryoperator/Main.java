package com.gmail.binaryoperator;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.function.BinaryOperator;

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		try {
			testApp();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void testApp() throws InterruptedException {
//		String numbers = getNumbers();
//		String commas = getThroughComma(numbers);
//		System.out.println(commas);
		String str1 = "This is how we doing";
		String str2 = "And this is it and we are here doing something awful";
		String result = getLongestWord(str1, str2);
		System.out.println(result);
		List<Integer> one = new ArrayList(List.of(1, 1, 2, 3, 4, 5, 6, 55));

		List<Integer> two = new ArrayList(List.of(12, 23, 34, 3, 55, 6));
		List<Integer> three = new ArrayList(List.of(12, 23, 34, 4, 55, 6));

//		System.out.println(getSameNumbers(one, two));

		getListWithMinimalNumber(three, two);
	}

	public static String getLongestWord(String str, String str2) {
		BinaryOperator<String> biOp = (one, two) -> {
			String[] txt = str.split(" |\\,");
			String[] txt2 = str2.split(" |\\,");
			String max = txt[0];

			for (int i = 0; i < txt.length; i++) {
				if (max.length() < txt[i].length()) {
					max = txt[i];
				}
				if (i == txt.length - 1) {
					for (int j = 0; j < txt2.length; j++) {
						if (max.length() < txt2[j].length()) {
							max = txt2[j];
						}
					}
				}
			}

			return max;
		};

		return biOp.apply(str, str2);
	}

	public static <T extends Number> List<? extends Number> getSameNumbers(List<? extends Number> one,
			List<? extends Number> two) {
		Comparator<Number> comp = (on, tw) -> on.byteValue() - tw.byteValue();
		BinaryOperator<List<? extends Number>> biOp = (o, t) -> {
			List<Number> equals = new ArrayList<>();
			System.out.println(one);
			System.out.println(two);

			for (int i = 0; i < one.size(); i++) {
				for (int j = 0; j < two.size(); j++) {

					if (comp.compare(one.get(i), two.get(j)) == 0) {
						equals.add(one.get(i));

					}
				}
			}
			return equals;
		};

		return biOp.apply(two, two);
	}

	public static <T extends Number> List<? extends Comparable<T>> getListWithMinimalNumber(List< ? extends Comparable<T>> one,
			List<? extends Comparable<T>> two) throws InterruptedException {
		Comparator<T> comp = (o, t) -> o.byteValue()-t.byteValue();
		
		
		BinaryOperator<List<? extends Comparable<T>>> biOp = (o, t) -> {
			MinMultyFinder mmf = new MinMultyFinder();	
			List<? extends Comparable<T>> mins = null;
			
				try {
					mins =  mmf.getListWithMinElement(o,t);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			
			return mins;
		};
		
		System.out.println(biOp.apply(one, two));
		
		return biOp.apply(one, two);
	}
	
	
	

	public static String getThroughComma(String sts) {

		StringBuilder sb = new StringBuilder();

		String[] txt = sts.split(System.lineSeparator());

		for (int i = 0; i < txt.length; i++) {
			if (i < txt.length - 1) {
				sb.append(txt[i] + ",");
			} else {
				sb.append(txt[i]);
			}
		}

		return sb.toString();
	}

	public static String getNumbers() {
		String str = "8341683\n" + "1986289\n" + "1216182\n" + "115923\n" + "1665995\n" + "4314077\n" + "1155963\n"
				+ "8683639\n" + "1346630\n" + "5956891\n" + "664047\n" + "3498488\n" + "7016290327\n" + "1178878\n"
				+ "1957654\n" + "UA11111111\n" + "1906762\n" + "5228208\n" + "7011644930\n" + "6797322\n" + "1287910\n"
				+ "1131221\n" + "8707368\n" + "5750391\n" + "1636425\n" + "1861885\n" + "8405089\n" + "1386857\n"
				+ "1195038\n" + "3645688\n" + "1757639\n" + "1154221\n" + "9334752\n" + "1100547\n" + "1156065\n"
				+ "1139701\n" + "1506677\n" + "1770222\n" + "2171967\n" + "5871342\n" + "1474328\n" + "1328441\n"
				+ "1293255\n" + "8282292\n" + "5489928\n" + "1215436\n" + "7019056333\n" + "1179199\n" + "3640103\n"
				+ "1208528\n" + "1122413\n" + "1774203\n" + "1157045\n" + "532790\n" + "1877231\n" + "1233833\n"
				+ "3658074\n" + "3677955\n" + "8682961\n" + "2354563\n" + "1950911\n" + "1153594\n" + "7020900497\n"
				+ "1946762\n" + "532338\n" + "6003738\n" + "5880884\n" + "1235945\n" + "5592899\n" + "1149336\n"
				+ "3409519\n" + "1351409\n" + "8614337\n" + "3645694\n" + "5846357\n" + "1387592\n" + "5747772\n"
				+ "1791230\n" + "8319481\n" + "3641204\n" + "1811786\n" + "1292576\n" + "1810997\n" + "1241858\n"
				+ "8682889\n" + "3704171\n" + "5741010\n" + "1770924\n" + "654321\n" + "3496820\n" + "1431261\n"
				+ "5713044\n" + "1173247\n" + "1153644\n" + "5409207\n" + "2420545\n" + "7016152490\n" + "7020595311\n"
				+ "1320237\n" + "3641976\n" + "7019501890\n" + "5580708\n" + "7009963891\n" + "1309558\n" + "3342289\n"
				+ "7388272\n" + "5668678\n" + "8550765\n" + "2466578\n" + "2361525\n" + "5685568\n" + "2431326\n"
				+ "2359313\n" + "1147245\n" + "5709139\n" + "7021699008\n" + "3478072\n" + "5291538\n" + "7012196950\n"
				+ "1123309\n" + "5288168\n" + "11223344\n" + "1217065\n" + "1121270\n" + "3487816\n" + "2327993\n"
				+ "1198319\n" + "7010848647\n" + "1162369\n" + "5261488\n" + "1353111\n" + "3625049\n" + "1858423\n"
				+ "1748525\n" + "5624874\n" + "3645683\n" + "7014240876\n" + "1342490\n" + "1362632\n" + "1153607\n"
				+ "1339923\n" + "1770624\n" + "1212035\n" + "1130157\n" + "5957802\n" + "2359001\n" + "5871736\n"
				+ "1885463\n" + "111111111\n" + "1812869\n" + "1340414\n" + "518297\n" + "1986114\n" + "8303944\n"
				+ "8701509\n" + "5824805\n" + "7706556\n" + "5786875\n" + "5906339\n" + "1929249\n" + "1247356\n"
				+ "6020034\n" + "UA123456\n" + "5763281\n" + "2469079\n" + "3362907\n" + "2229988\n" + "2183709\n"
				+ "1831209\n" + "5700363\n" + "5741796\n" + "5713761\n" + "1181429\n" + "8189326\n" + "1216675\n"
				+ "1324811\n" + "471543\n" + "1644732\n" + "1506445\n" + "5595507\n" + "763438\n" + "1665619\n"
				+ "8403005\n" + "1128498\n" + "7020361795\n" + "3658143\n" + "2315415\n" + "1196049\n" + "5573593\n"
				+ "3645728\n" + "1341695\n" + "529573\n" + "4455667788\n" + "4566887\n" + "1803156\n" + "3658430\n"
				+ "1328223\n" + "3494803\n" + "6770371\n" + "1116636\n" + "7020526475\n" + "1509929\n" + "1295681\n"
				+ "2322806\n" + "1210546\n" + "8358548\n" + "2250033\n" + "1838747\n" + "7018973372\n" + "3658076\n"
				+ "2476068\n" + "7018588799\n" + "7018161925\n" + "5882238\n" + "1680372\n" + "1944850\n"
				+ "7017435059\n" + "807181\n" + "1153034\n" + "1866530\n" + "2316133\n" + "1136464\n" + "7016951764\n"
				+ "1145598\n" + "3027859\n" + "5756647\n" + "1114222\n" + "8410727\n" + "5784907\n" + "1322227\n"
				+ "1374878\n" + "510922\n" + "5876306\n" + "7015966195\n" + "7011135012\n" + "8194555\n" + "2409640\n"
				+ "1474720\n" + "8577701\n" + "7015214538\n" + "1387106\n" + "5747836\n" + "5824470\n" + "3479091\n"
				+ "5669564\n" + "5667790\n" + "1896643\n" + "8602531\n" + "1977833\n" + "6393179\n" + "1223192\n"
				+ "5387305\n" + "1724211\n" + "3496394\n" + "1379665\n" + "1305964\n" + "5539069\n" + "1909041\n"
				+ "1107402\n" + "538861\n" + "2347515\n" + "1663670\n" + "7016212077\n" + "7010584661\n" + "1337979\n"
				+ "7016364598\n" + "7888748\n" + "5643808\n" + "5765751\n" + "8680104\n" + "7395214\n" + "8308740\n"
				+ "4323716\n" + "1235188\n" + "5803813\n" + "8318044\n" + "8411811\n" + "5926664\n" + "1302985\n"
				+ "1335441\n" + "1771439\n" + "1911185\n" + "8369783\n" + "7015711771\n" + "1781959\n" + "2244826\n"
				+ "5751496\n" + "5378915\n" + "1201716\n" + "1688691\n" + "1153623\n" + "5499112\n" + "1811787\n"
				+ "1796370\n" + "206882\n" + "6018899\n" + "1478150\n" + "1651186\n" + "1522261\n" + "7187167\n"
				+ "5784044\n" + "7294341\n" + "1930949\n" + "1851993\n" + "1782910\n" + "1203760\n" + "1150993\n"
				+ "2471321\n" + "5773429\n" + "1279390\n" + "412364\n" + "2238145\n" + "5433612\n"
				+ "5573223N21C101100\n" + "2467593\n" + "3456493\n" + "5619111\n" + "1161568\n" + "1153542\n"
				+ "7020583240\n" + "1154750\n" + "1516595\n" + "1235191\n" + "434266\n" + "1393821\n" + "7020741422\n"
				+ "5395133\n" + "7019167685\n" + "1132250\n" + "3645702\n" + "3640283\n" + "7021880860\n" + "5879008\n"
				+ "407951\n" + "1546172\n" + "7200374\n" + "972137\n" + "3058266\n" + "8068442\n" + "1515354\n"
				+ "7016062841\n" + "7018868881\n" + "1219659\n" + "5482226\n" + "1145209\n" + "8110329\n" + "3645738\n"
				+ "1785963\n" + "1357120\n" + "8672943\n" + "2325295\n" + "1142216\n" + "1202193\n" + "5728028\n"
				+ "1219482\n" + "7019521079\n" + "7016164588\n" + "7021953861\n" + "5923876\n" + "2428840\n"
				+ "1752641\n" + "1788590\n" + "7018494253\n" + "769296\n" + "7021400438\n" + "2505081\n" + "3053591\n"
				+ "2473805\n" + "7410397\n" + "3660464\n" + "7021881305\n" + "7014321694\n" + "1145526\n" + "5348130\n"
				+ "1810824\n" + "1212476\n" + "768549\n" + "1153904\n" + "5959728\n" + "1484854\n" + "1884949\n"
				+ "5650965\n" + "5502386\n" + "154801\n" + "7010698126\n" + "5990825\n" + "5771132\n" + "7011947094\n"
				+ "5514174\n" + "1444495\n" + "1642592\n" + "1229188\n" + "474955\n" + "1770111\n" + "8445743\n"
				+ "1836080\n" + "2352560\n" + "5784242\n" + "370517\n" + "1158827\n" + "1598135\n" + "1121276\n"
				+ "1197677\n" + "730424\n" + "8654186\n" + "7355747\n" + "8688219\n" + "1204366\n" + "8449584\n"
				+ "2359313\n" + "1819609\n" + "2163274\n" + "7020041296\n" + "7019186544\n" + "1806656\n" + "1125240\n"
				+ "7021286428\n" + "122337\n" + "3658431\n" + "5750095\n" + "1955105\n" + "7018234183\n" + "1387794\n"
				+ "3644199\n" + "5869315\n" + "5451487\n" + "1142227\n" + "188010\n" + "1217987\n" + "1346013\n"
				+ "5460837\n" + "7898282\n" + "3502866\n" + "1281762\n" + "1153070\n" + "7010379938\n" + "7014524128\n"
				+ "2322631\n" + "1301288\n" + "884016\n" + "3607285\n" + "3324383\n" + "855742\n" + "6006898\n"
				+ "127234\n" + "4547591\n" + "5638753\n" + "1338009\n" + "7379954\n" + "7400000\n" + "1351355\n"
				+ "1115828\n" + "8632198\n" + "1518502\n" + "7020911691\n" + "2353850\n" + "5074689\n" + "5551001\n"
				+ "5080316\n" + "4561045\n" + "608752\n" + "1887017\n" + "7257507\n" + "3607875\n" + "5680866\n"
				+ "3672694\n" + "7389722\n" + "5095049\n" + "2241916\n" + "7018483598\n" + "3639719\n" + "1522599\n"
				+ "1887938\n" + "1212859\n" + "8459192\n" + "7016953929\n" + "1201740\n" + "1152919\n" + "1295270\n"
				+ "1210481\n" + "5793071\n" + "5932845\n" + "1784666\n" + "8501561\n" + "7013688527\n" + "1874655\n"
				+ "1365892\n" + "784150\n" + "7018256451\n" + "2321684\n" + "1296772\n" + "1847248\n" + "7017114431\n"
				+ "1398160\n" + "2306920\n" + "1976533\n" + "2239120\n" + "832735\n" + "1112757\n" + "2358483\n"
				+ "1294377\n" + "7298029\n" + "1909528\n" + "7015416050\n" + "1398093\n" + "1770176\n" + "7015305523\n"
				+ "246398\n" + "1200666\n" + "8621600\n" + "1513762\n" + "5667790\n" + "7020911691";

		return str;
	}

}
